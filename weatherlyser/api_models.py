# generated by datamodel-codegen:
#   filename:  openapi_historical_weather_api.yml
#   timestamp: 2023-07-11T19:56:04+00:00
#   datamodel-codegen --input openapi_historical_weather_api.yml --input-file-type auto --openapi-scopes paths

from __future__ import annotations

import datetime as dt
from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class HourlyEnum(Enum):
    temperature_2m = "temperature_2m"
    relativehumidity_2m = "relativehumidity_2m"
    dewpoint_2m = "dewpoint_2m"
    apparent_temperature = "apparent_temperature"
    pressure_msl = "pressure_msl"
    cloudcover = "cloudcover"
    cloudcover_low = "cloudcover_low"
    cloudcover_mid = "cloudcover_mid"
    cloudcover_high = "cloudcover_high"
    windspeed_10m = "windspeed_10m"
    windspeed_100m = "windspeed_100m"
    winddirection_10m = "winddirection_10m"
    winddirection_100m = "winddirection_100m"
    windgusts_10m = "windgusts_10m"
    shortwave_radiation = "shortwave_radiation"
    direct_radiation = "direct_radiation"
    direct_normal_irradiance = "direct_normal_irradiance"
    diffuse_radiation = "diffuse_radiation"
    vapor_pressure_deficit = "vapor_pressure_deficit"
    et0_fao_evapotranspiration = "et0_fao_evapotranspiration"
    precipitation = "precipitation"
    rain = "rain"
    weathercode = "weathercode"
    snowfall = "snowfall"
    soil_temperature_0_to_7cm = "soil_temperature_0_to_7cm"
    soil_temperature_7_to_28cm = "soil_temperature_7_to_28cm"
    soil_temperature_28_to_100cm = "soil_temperature_28_to_100cm"
    soil_temperature_100_to_255cm = "soil_temperature_100_to_255cm"
    soil_moisture_0_to_7cm = "soil_moisture_0_to_7cm"
    soil_moisture_7_to_28cm = "soil_moisture_7_to_28cm"
    soil_moisture_28_to_100cm = "soil_moisture_28_to_100cm"
    soil_moisture_100_to_255cm = "soil_moisture_100_to_255cm"
    is_day = "is_day"
    surface_pressure = "surface_pressure"


class DailyEnum(Enum):
    temperature_2m_max = "temperature_2m_max"
    temperature_2m_min = "temperature_2m_min"
    apparent_temperature_max = "apparent_temperature_max"
    apparent_temperature_min = "apparent_temperature_min"
    precipitation_sum = "precipitation_sum"
    precipitation_hours = "precipitation_hours"
    weathercode = "weathercode"
    sunrise = "sunrise"
    sunset = "sunset"
    windspeed_10m_max = "windspeed_10m_max"
    windgusts_10m_max = "windgusts_10m_max"
    winddirection_10m_dominant = "winddirection_10m_dominant"
    shortwave_radiation_sum = "shortwave_radiation_sum"
    et0_fao_evapotranspiration = "et0_fao_evapotranspiration"


class TemperatureUnit(Enum):
    celsius = "celsius"
    fahrenheit = "fahrenheit"


class WindspeedUnit(Enum):
    kmh = "kmh"
    ms = "ms"
    mph = "mph"
    kn = "kn"


class Timeformat(Enum):
    iso8601 = "iso8601"
    unixtime = "unixtime"


class V1ArchiveGetResponse(BaseModel):
    latitude: Optional[float] = Field(
        None,
        description="WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
        examples=[52.52],
    )
    longitude: Optional[float] = Field(
        None,
        description="WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
        examples=["13.419.52"],
    )
    elevation: Optional[float] = Field(
        None,
        description="The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.",
        examples=[44.812],
    )
    generationtime_ms: Optional[float] = Field(
        None,
        description="Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.",
        examples=[2.2119],
    )
    utc_offset_seconds: Optional[int] = Field(
        None,
        description="Applied timezone offset from the &timezone= parameter.",
        examples=[3600],
    )
    hourly: Optional[Dict[str, Any]] = Field(
        None,
        description="For each selected weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.",
    )
    hourly_units: Optional[Dict[str, Any]] = Field(
        None,
        description="For each selected weather variable, the unit will be listed here.",
    )
    daily: Optional[Dict[str, Any]] = Field(
        None,
        description="For each selected daily weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.",
    )
    daily_units: Optional[Dict[str, Any]] = Field(
        None,
        description="For each selected daily weather variable, the unit will be listed here.",
    )


class V1ArchiveGetResponse1(BaseModel):
    error: Optional[bool] = Field(None, description="Always set true for errors")
    reason: Optional[str] = Field(
        None,
        description="Description of the error",
        examples=["Latitude must be in range of -90 to 90Â°. Given: 300"],
    )


# added after generation
# query parameters are not described in the openapi spec


class HistoryModelsEnum(Enum):
    best_match = "best_match"
    era5 = "era5"
    era5_land = "era5_land"
    cerra = "cerra"


class ArchiveQueryParameters(BaseModel):
    latitude: float
    longitude: float
    hourly: str | list[str] | None = None
    daily: str | list[str] | None = None
    start_date: dt.date
    end_date: dt.date
    models: str | list[str] | None = None
    timezone: str | None = None
